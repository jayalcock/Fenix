/****************************************************************************
* File:  		flightControl.c
* Author: 		Jay Alcock
* Date: 		12OCT13
* Description:          Modifies motor outputs 
*
* History:
*
****************************************************************************/

/*=========================================================================*/
/*  DEFINE: Preprocessors                                            	   */
/*=========================================================================*/
#define _flightControl_c_

#include "flightControl.h"

volatile N8 motor1basic = 0, motor2basic = 0, motor3basic = 0, motor4basic = 0,
	    motor1Output = 0, motor2Output = 0, motor3Output = 0, motor4Output = 0;
volatile BOOL pidRst;
/*=========================================================================*/
/*  Functions                                                              */
/*=========================================================================*/

//==========================================================================
// Title: 		hoverPID
// Author:		Jay Alcock
// Date:		
// Description:		PID control function.
//
// Inputs:		task parameter
// Outputs:             none
//==========================================================================
void hoverPID(void *param)
{    


//    N8 motor1Output, motor2Output, motor3Output, motor4Output;
    PID pitch, roll, yaw;
    
    //time step
    pitch.dt = roll.dt = yaw.dt = PIDtimestep / 1000.0;
    
    //Initialise error value
    pitch.errorOld = roll.errorOld = yaw.errorOld =  
    pitch.integral = roll.integral = yaw.integral = 
    pitch.actual = roll.actual = yaw.actual = 0;
    
    //proportional gain
    pitch.Kp = roll.Kp = 1.5;
    yaw.Kp = 0.1;
    
    //integral value
    pitch.Ki = roll.Ki = 0.05;
    yaw.Ki = 1.0;
    
    //derivative value
    pitch.Kd = roll.Kd = 0;
    yaw.Kd = 1;
    
    //max/min output & deadband values
    pitch.MAXout = roll.MAXout = yaw.MAXout = 20.0;
    pitch.MINout = roll.MINout = yaw.MINout = -20.0;
    pitch.deadband = roll.deadband = yaw.deadband = 0.5;
    
    void *p, *r, *y;

    while(1)
    {
	// wait for start command to start calculations
//	ctl_events_wait(CTL_EVENT_WAIT_ALL_EVENTS, &e1, START, 0, 0);
    
	// 20ms PID cycle time
	ctl_timeout_wait(ctl_get_current_time() + PIDtimestep);	
	
	// wait for update PID event to be set by sensors
//	ctl_events_wait(CTL_EVENT_WAIT_ALL_EVENTS_WITH_AUTO_CLEAR , &e1, UPDATE_PID, 0, 0);
	
	// read values off queue if populated
	if(ctl_message_queue_num_used(&PIDQ) == 2)
	{
	    // receive pitch and roll data from message queue
	    ctl_message_queue_receive(&PIDQ, &p, 0 , 0);
	    ctl_message_queue_receive(&PIDQ, &r, 0 , 0);

	    // copy pitch and roll values to local variables
	    pitch.actual = *(float *)p;
	    roll.actual = *(float *)r;
	}
    
	// pitch and roll setpoint 0 for hover
	pitch.setpoint = roll.setpoint = 0;
	
	if(pidRst)
	{
	    pitch.output = roll.output = yaw.output = pitch.integral = roll.integral = yaw.integral = 0;
	    pidRst = 0;
	}
	
	//Calculate P,I,D
	PIDcalc(&pitch);
	PIDcalc(&roll);
//	PIDcalc(&yaw);
	
	//Trim motor outputs
	//motor 1 trim
	if(pitch.output >= 0)
	    motor1Output = motor1basic + pitch.output; 
	    motor3Output = motor3basic - pitch.output;

	//motor 3 trim
	if(pitch.output <= 0)
	    motor3Output = motor3basic - pitch.output; 
	    motor1Output = motor1basic + pitch.output;

	//motor 2 trim
	if(roll.output >= 0)
	    motor2Output = motor2basic - roll.output; 
	    motor4Output = motor4basic + roll.output;
	
	//motor 4 trim
	if(roll.output <= 0)
	    motor4Output = motor4basic + roll.output; 
	    motor2Output = motor2basic - roll.output;

	if(motor1Output > 100)
	    motor1Output = 100;
	else if(motor1Output < 0)
	    motor1Output = 0;
	
	if(motor2Output > 100)
	    motor2Output = 100;
	else if(motor2Output < 0)
	    motor2Output = 0;
	
	if(motor3Output > 100)
	    motor3Output = 100;
	else if(motor3Output < 0)
	    motor3Output = 0;
	
	if(motor4Output > 100)
	    motor4Output = 100;
	else if(motor4Output < 0)
	    motor4Output = 0;
	
	float temp = (float)motor3Output;
	
//    	ctl_message_queue_post(&sensorValsQ, &motor1Output, 0, 0);
//    	ctl_message_queue_post(&sensorValsQ, &motor2Output, 0, 0);
//	ctl_message_queue_post(&sensorValsQ, &motor3Output, 0, 0);
//	ctl_message_queue_post(&sensorValsQ, &motor4Output, 0, 0);
    
//    	ctl_message_queue_post(&sensorValsQ, &pitch.output, 0, 0);
//   	ctl_message_queue_post(&sensorValsQ, &temp, 0, 0);
//    	ctl_message_queue_post(&sensorValsQ, &roll.output, 0, 0);

//	ctl_events_set_clear(&e1, UART_WRITE, NULL);		

	// enable update_pwm task
	ctl_events_set_clear(&e1, UPDATE_PWM, NULL);
	
    }
}
//==========================================================================
// Title: 		PIDcalc
// Author:		Jay Alcock
// Date:		
// Description:		PID calculation function.
//
// Inputs:		PID struct
// Outputs:             none
//==========================================================================
void PIDcalc(PID *vals)
{
    // controller error calculation
    vals->error = vals->setpoint - vals->actual;   
    
    // In case of error too small then stop integration (deadband)
    if(fabsf(vals->error) > vals->deadband)
	vals->integral = vals->integral + vals->error * vals->dt;

    // derivative calculation
    vals->derivative = (vals->error - vals->errorOld) / vals->dt;  

    // controller output calculation (derivative omitted)
    vals->output = (vals->Kp * vals->error) + (vals->Ki * vals->integral);// + Kd*derivative;

    // output limiting
    if(vals->output > vals->MAXout)
	vals->output = vals->MAXout;
  
    else if(vals->output < vals->MINout)
	vals->output = vals->MINout;

    // update controller error value
    vals->errorOld = vals->error;	
}


//==========================================================================
// Title: 		collectiveUp
// Author:		Jay Alcock
// Date:		10OCT13
// Description:         increases collective 
//
// Inputs:		None
// Outputs:             None
//==========================================================================
void collectiveUp(void)
{
    motor1basic += 5;
    motor2basic += 5;
    motor3basic += 5;
    motor4basic += 5;
        
    if(motor1basic > 100)
	motor1basic = 100;
    if(motor2basic > 100)
	motor2basic = 100;
    if(motor3basic > 100)
	motor3basic = 100;
    if(motor4basic > 100)
	motor4basic = 100;
}

//==========================================================================
// Title: 		collectiveDown
// Author:		Jay Alcock
// Date:		10OCT13
// Description:         decreases collective 
//
// Inputs:		None
// Outputs:             None
//==========================================================================
void collectiveDown(void)
{
    motor1basic -= 5;
    motor2basic -= 5;
    motor3basic -= 5;
    motor4basic -= 5;
       
    if(motor1basic < 0)
	motor1basic = 0;
    if(motor2basic < 0)
	motor2basic = 0;
    if(motor3basic < 0)
	motor3basic = 0;
    if(motor4basic < 0)
	motor4basic = 0;  
}
  
//==========================================================================
// Title: 		pitchForward
// Author:		Jay Alcock
// Date:		10OCT13
// Description:         pitchesForward 
//
// Inputs:		None
// Outputs:             None
//==========================================================================
void pitchForward(void)
{
    motor1basic -= 5;
    motor3basic += 5;
       
    if(motor1basic < 0)
	motor1basic = 0;
    if(motor3basic > 100)
	motor3basic = 100;
}
   
//==========================================================================
// Title: 		pitchBackward
// Author:		Jay Alcock
// Date:		10OCT13
// Description:         pitches Backward 
//
// Inputs:		None
// Outputs:             None
//==========================================================================
void pitchBackward(void)
{
    motor1basic += 5;
    motor3basic -= 5;
       
    if(motor3basic < 0)
	motor3basic = 0;
    if(motor1basic > 100)
	motor1basic = 100;
}
   
//==========================================================================
// Title: 		rollRight
// Author:		Jay Alcock
// Date:		10OCT13
// Description:         rolls right 
//
// Inputs:		None
// Outputs:             None
//==========================================================================
void rollRight(void)
{
    motor4basic += 5;
    motor2basic -= 5;
       
    if(motor2basic < 0)
	motor2basic = 0;
    if(motor4basic > 100)
	motor4basic = 100;
}
   
//==========================================================================
// Title: 		rollLeft
// Author:		Jay Alcock
// Date:		10OCT13
// Description:         rolls left 
//
// Inputs:		None
// Outputs:             None
//==========================================================================
void rollLeft(void)
{
    motor2basic += 5;
    motor4basic -= 5;
       
    if(motor4basic < 0)
	motor4basic = 0;
    if(motor2basic > 100)
	motor2basic = 100;
}
   //==========================================================================
// Title: 		yawRight
// Author:		Jay Alcock
// Date:		10OCT13
// Description:         yaws right 
//
// Inputs:		None
// Outputs:             None
//==========================================================================
void yawRight(void)
{
    motor1basic -= 5;
    motor2basic += 5;
    motor3basic -= 5;
    motor4basic += 5;
       
    if(motor1basic < 0)
	motor1basic = 0;
    if(motor2basic > 100)
	motor2basic = 100;
    if(motor3basic < 0)
	motor3basic = 0;
    if(motor4basic > 100)
	motor4basic = 100;
}
//==========================================================================
// Title: 		yawLeft
// Author:		Jay Alcock
// Date:		10OCT13
// Description:         yaws left 
//
// Inputs:		None
// Outputs:             None
//==========================================================================
void yawLeft(void)
{
    motor2basic -= 5;
    motor1basic += 5;
    motor4basic -= 5;
    motor3basic += 5;
       
    if(motor2basic < 0)
	motor2basic = 0;
    if(motor1basic > 100)
	motor1basic = 100;
    if(motor4basic < 0)
	motor4basic = 0;
    if(motor3basic > 100)
	motor3basic = 100;
}